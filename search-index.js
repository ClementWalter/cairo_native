var searchIndex = JSON.parse('{\
"cli":{"doc":"A compiler to convert Cairo’s intermediate …","t":[3,11,11,11,11,11,11,11,11,11,11,11,12,11,5,12,11,11,11,11,11,11],"n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","main","output","try_from","try_into","type_id","upcast","update_from_arg_matches","update_from_arg_matches_mut"],"q":["cli","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","","","","The input sierra file.","Calls <code>U::from(self)</code>.","","The output file.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,[[]],[[],10],0,[[],7],[[],7],[[],11],[[]],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"p":[[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"]]},\
"sierra2mlir":{"doc":"A compiler to convert Cairo’s intermediate …","t":[5,0,5,3,3,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["compile","compiler","execute","Compiler","Storage","bool_type","borrow","borrow","borrow_mut","borrow_mut","code","compile","context","default","felt_add_create","felt_sub_create","felt_type","fmt","from","from","i32_type","into","into","module","named_attribute","new","new_block","op_add","op_const","op_eq","op_felt_const","op_felt_mul","op_felt_rem","op_felt_sub","op_func","op_func_call","op_return","process_libfuncs","process_statements","process_types","program","run_fib","run_gpu","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast"],"q":["sierra2mlir","","","sierra2mlir::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Types, functions, etc storage. This aproach works better …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new block","Only the MLIR op, doesn’t do modulo.","New constant","Only the MLIR op.","New felt constant","Only the MLIR op.","Only the MLIR op.","Only the MLIR op, doesn’t do modulo.","Example function_type: “(i64, i64) -&gt; i64”","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,6,10,6,10,6,6,6,10,6,6,6,10,6,10,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,6,10,6,10,6,10],"f":[[1,[[4,[2,3]]]],0,[1,[[4,[5,3]]]],0,0,[6,7],[[]],[[]],[[]],[[]],0,[6,[[9,[8]]]],0,[[],10],[6,[[9,[11]]]],[6,[[9,[11]]]],[6,7],[[10,12],13],[[]],[[]],[6,7],[[]],[[]],0,[[6,1,1]],[1,[[9,[6]]]],[6,14],[[6,14,15,15],8],[[6,14,1,7],8],[[6,14,15,15],8],[[6,14,1],8],[[6,14,15,15],8],[[6,14,15,15],8],[[6,14,15,15],8],[[6,1,1,[17,[16]]],11],[[6,14,1],8],[[6,14],8],[[6,10],9],[[6,10],9],[[6,10]],0,[6,[[9,[8]]]],[6,[[9,[8]]]],[[],4],[[],4],[[],4],[[],4],[[],18],[[],18],[[]],[[]]],"p":[[15,"str"],[3,"String"],[3,"Report"],[4,"Result"],[3,"ExecutionEngine"],[3,"Compiler"],[3,"Type"],[3,"OperationRef"],[6,"Result"],[3,"Storage"],[3,"Operation"],[3,"Formatter"],[6,"Result"],[3,"Block"],[3,"Value"],[3,"Region"],[3,"Vec"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
