var searchIndex = JSON.parse('{\
"mlir":{"doc":"A MLIR safe API wrapper","t":[0,0,0,0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,4,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11],"n":["attribute","block","context","dialects","identifier","llvm_string","location","mlir_type","module","operation","registry","Attribute","NamedAttribute","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Block","borrow","borrow_mut","drop","fmt","from","into","new","try_from","try_into","type_id","Context","append_registry","borrow","borrow_mut","default","drop","eq","fmt","from","into","new","try_from","try_into","type_id","Dialect","borrow","borrow_mut","from","into","try_from","try_into","type_id","Identifier","as_str","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","LLVMString","as_str","borrow","borrow_mut","fmt","from","from","into","try_from","try_into","type_id","Location","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","DataType","Int","SignedInt","Type","UnsignedInt","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","get_width","into","into","is_int","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","bitwidth","bitwidth","bitwidth","Module","borrow","borrow_mut","drop","fmt","from","into","new","try_from","try_into","type_id","Operation","OperationState","add_attributes","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Registry","borrow","borrow_mut","default","drop","fmt","from","into","new","register_all_dialects","try_from","try_into","type_id"],"q":["mlir","","","","","","","","","","","mlir::attribute","","","","","","","","","","","","","","","","","","mlir::block","","","","","","","","","","","mlir::context","","","","","","","","","","","","","","mlir::dialects","","","","","","","","mlir::identifier","","","","","","","","","","","mlir::llvm_string","","","","","","","","","","","mlir::location","","","","","","","","","","mlir::mlir_type","","","","","","","","","","","","","","","","","","","","","","","","","","","","mlir::mlir_type::DataType","","","mlir::module","","","","","","","","","","","mlir::operation","","","","","","","","","","","","","","","","","","","mlir::registry","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new empty block with the given argument types …","","","","","Append the contents of the given dialect registry to the …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates an MLIR context.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","A MLIR location.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a location with unknown position owned by the …","","","","","","","A MLIR type.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the bit width of this type, if it is an integer type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Appends all upstream dialects and extensions to the …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,0,8,8,8,8,8,8,8,8,8,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,23,23,23,23,23,23,23,0,4,4,4,4,4,4,4,4,4,4,0,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,0,17,17,0,17,17,18,17,18,17,17,17,17,18,17,18,18,17,18,17,18,17,17,18,17,18,17,18,24,25,26,0,20,20,20,20,20,20,20,20,20,20,0,0,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,0,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[[4,3],5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],[8],[[8,9],10],[[]],[[]],[[[12,[11]]],8],[[],6],[[],6],[[],7],0,[[1,13]],[[]],[[]],[[],1],[1],[[1,1],14],[[1,9],10],[[]],[[]],[[],1],[[],6],[[],6],[[],7],0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],7],0,[4,2],[[]],[[]],[[4,9],10],[[]],[[]],[[1,2],4],[[],6],[[],6],[[],7],0,[15,2],[[]],[[]],[[15,9],10],[2,15],[[]],[[]],[[],6],[[],6],[[],7],0,[[]],[[]],[[16,9],10],[[]],[[]],[1,16],[[],6],[[],6],[[],7],0,0,0,0,0,[[]],[[]],[[]],[[]],[17,17],[[]],[[17,17],14],[[17,9],10],[[18,9],10],[[]],[[]],[18,[[12,[19]]]],[[]],[[]],[17,14],[[1,17],18],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0,0,0,[[]],[[]],[20],[[20,9],10],[[]],[[]],[16,20],[[],6],[[],6],[[],7],0,0,[21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[2,16],21],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],[[],13],[13],[[13,9],10],[[]],[[]],[[],13],[13],[[],6],[[],6],[[],7]],"p":[[3,"Context"],[15,"str"],[3,"Attribute"],[3,"Identifier"],[3,"NamedAttribute"],[4,"Result"],[3,"TypeId"],[3,"Block"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[4,"Option"],[3,"Registry"],[15,"bool"],[3,"LLVMString"],[3,"Location"],[4,"DataType"],[3,"Type"],[15,"u32"],[3,"Module"],[3,"OperationState"],[3,"Operation"],[3,"Dialect"],[13,"SignedInt"],[13,"Int"],[13,"UnsignedInt"]]},\
"sierra2mlir":{"doc":"A compiler to convert Cairo’s intermediate …","t":[3,11,11,11,11,11,11,0,11,11,11,11,11,12,11,5,12,11,11,11,11,11,11,3,11,11,12,11,12,11,11,12,11,11,11,11],"n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","compiler","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","main","output","try_from","try_into","type_id","upcast","update_from_arg_matches","update_from_arg_matches_mut","Compiler","borrow","borrow_mut","code","compile_from_code","context","from","into","program","try_from","try_into","type_id","upcast"],"q":["sierra2mlir","","","","","","","","","","","","","","","","","","","","","","","sierra2mlir::compiler","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","","","The input sierra file.","Calls <code>U::from(self)</code>.","","The output file.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,[[]],[[],10],0,[[],7],[[],7],[[],11],[[]],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],0,[[]],[[]],0,[12,10],0,[[]],[[]],0,[[],7],[[],7],[[],11],[[]]],"p":[[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"],[15,"str"],[3,"Compiler"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
