var searchIndex = JSON.parse('{\
"sierra2mlir":{"doc":"A compiler to convert Cairo’s intermediate …","t":[0,3,3,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["compiler","Compiler","Storage","bool_type","borrow","borrow","borrow_mut","borrow_mut","code","compile","context","default","felt_add_create","felt_sub_create","felt_type","fmt","from","from","i32_type","into","into","module","named_attribute","new","new_block","op_const","op_eq","op_felt_add","op_felt_const","op_felt_mul","op_felt_rem","op_felt_sub","op_func","op_func_call","op_return","process_libfuncs","process_statements","process_types","program","run_fib","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast"],"q":["sierra2mlir","sierra2mlir::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Types, functions, etc storage. This aproach works better …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new block","New constant","Only the MLIR op.","Only the MLIR op, doesn’t do modulo.","New felt constant","Only the MLIR op.","Only the MLIR op.","Only the MLIR op, doesn’t do modulo.","Example function_type: “(i64, i64) -&gt; i64”","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,5,1,5,1,1,1,5,1,1,1,5,1,5,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,5,1,5,1,5],"f":[0,0,0,[1,2],[[]],[[]],[[]],[[]],0,[1,[[4,[3]]]],0,[[],5],[1,[[4,[6]]]],[1,[[4,[6]]]],[1,2],[[5,7],8],[[]],[[]],[1,2],[[]],[[]],0,[[1,9,9]],[9,[[4,[1]]]],[1,10],[[1,10,9,2],3],[[1,10,11,11],3],[[1,10,11,11],3],[[1,10,9],3],[[1,10,11,11],3],[[1,10,11,11],3],[[1,10,11,11],3],[[1,9,9,[13,[12]]],6],[[1,10,9],3],[[1,10],3],[[1,5],4],[[1,5],4],[[1,5]],0,[1,[[4,[3]]]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[]],[[]]],"p":[[3,"Compiler"],[3,"Type"],[3,"OperationRef"],[6,"Result"],[3,"Storage"],[3,"Operation"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Block"],[3,"Value"],[3,"Region"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
