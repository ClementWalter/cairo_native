var searchIndex = JSON.parse('{\
"cli":{"doc":"A compiler to convert Cairo’s intermediate …","t":[3,4,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Args","Commands","Compile","Run","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","input","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","function","output"],"q":["cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cli::Commands",""],"d":["","","Compile to MLIR with LLVM dialect, ready to be converted …","Compile and run a program. The entry point must be a …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","The input sierra file.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The function to run. Can only run functions without …","The output file. If not specified its output will be …"],"i":[0,0,6,6,3,3,6,6,3,6,3,6,3,3,3,3,6,3,6,3,6,3,6,3,3,6,0,3,6,3,6,3,6,3,6,3,6,3,6,13,14],"f":[0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],[[]],[[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[[],[[8,[7]]]],[9,10],0,[[]],[[]],[[],11],[[],5],[[],5],[[],5],[[],5],[[],12],[[],12],[[]],[[]],[[3,2],[[5,[4]]]],[[6,2],[[5,[4]]]],[[3,2],[[5,[4]]]],[[6,2],[[5,[4]]]],0,0],"p":[[3,"Command"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[4,"Result"],[4,"Commands"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[6,"Result"],[3,"TypeId"],[13,"Run"],[13,"Compile"]]},\
"sierra2mlir":{"doc":"A compiler to convert Cairo’s intermediate …","t":[5,0,5,3,3,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["compile","compiler","execute","Compiler","Storage","bool_type","borrow","borrow","borrow_mut","borrow_mut","code","compile","context","default","double_felt_type","felt_add_create","felt_mul_create","felt_sub_create","felt_type","fmt","from","from","i32_type","into","into","module","named_attribute","new","new_block","op_add","op_const","op_eq","op_felt_const","op_felt_modulo","op_func","op_func_call","op_mul","op_rem","op_return","op_sext","op_sub","op_trunc","op_zext","prime_constant","process_libfuncs","process_statements","process_types","program","run_fib","run_gpu","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast"],"q":["sierra2mlir","","","sierra2mlir::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Types, functions, etc storage. This aproach works better …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new block","Only the MLIR op, doesn’t do modulo.","New constant","Only the MLIR op.","New felt constant","Does modulo prime and truncates back to felt type.","Example function_type: “(i64, i64) -&gt; i64”","","Only the MLIR op.","Only the MLIR op.","","","Only the MLIR op, doesn’t do modulo.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,6,10,6,10,6,6,6,10,6,6,6,6,6,10,6,10,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,6,10,6,10,6,10],"f":[[1,[[4,[2,3]]]],0,[1,[[4,[5,3]]]],0,0,[6,7],[[]],[[]],[[]],[[]],0,[6,[[9,[8]]]],0,[[],10],[6,7],[6,[[9,[11]]]],[6,[[9,[11]]]],[6,[[9,[11]]]],[6,7],[[10,12],13],[[]],[[]],[6,7],[[]],[[]],0,[[6,1,1],[[9,[14]]]],[1,[[9,[6]]]],[6,15],[[6,15,16,16],8],[[6,15,1,7],8],[[6,15,16,16],8],[[6,15,1],8],[[6,15,16],[[9,[8]]]],[[6,1,1,[18,[17]],19],[[9,[11]]]],[[6,15,1],[[9,[8]]]],[[6,15,16,16],8],[[6,15,16,16],8],[[6,15],8],[[6,15,16,7],8],[[6,15,16,16],8],[[6,15,16,7],8],[[6,15,16,7],8],[[6,15],8],[[6,10],9],[[6,10],9],[[6,10]],0,[6,[[9,[8]]]],[6,[[9,[8]]]],[[],4],[[],4],[[],4],[[],4],[[],20],[[],20],[[]],[[]]],"p":[[15,"str"],[3,"String"],[3,"Report"],[4,"Result"],[3,"ExecutionEngine"],[3,"Compiler"],[3,"Type"],[3,"OperationRef"],[6,"Result"],[3,"Storage"],[3,"Operation"],[3,"Formatter"],[6,"Result"],[3,"NamedAttribute"],[3,"Block"],[3,"Value"],[3,"Region"],[3,"Vec"],[15,"bool"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
